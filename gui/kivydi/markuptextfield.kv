<MarkupTextField>:

    canvas.before:
        Clear

        # Active indicator.
        Color:
            group: "active-indicator-color"
            rgba:
                ( \
                ( \
                ( \
                ( \
                self.theme_cls.onSurfaceVariantColor \
                if self.theme_line_color == "Primary" else \
                ( \
                self.line_color_normal \
                if self.line_color_normal else \
                self.theme_cls.onSurfaceVariantColor \
                ) \
                ) \
                self.theme_cls.primaryColor \
                if self.theme_line_color == "Primary" else \
                ( \
                self.line_color_focus \
                if self.line_color_focus else \
                self.theme_cls.primaryColor \
                ) \
                ) \
                if not self.error else self._get_error_color()
                ) \
                if not self.disabled else self.theme_cls.disabledTextColor \
                ) \
                if self.mode == "filled" else self.theme_cls.transparentColor
        Line:
            width: self._indicator_height
            points:
                self.x + dp(1), \
                self.y, \
                self.x - dp(1) + self.width, \
                self.y

        # Cursor blink.
        Color:
            rgba:
                ( \
                ( \
                self.theme_cls.primaryColor \
                if not self.error else \
                self._get_error_color() \
                ) \
                ) \
                if not self._cursor_blink \
                else \
                (0, 0, 0, 0)
        Rectangle:
            group: "rectangle-cursor-blink"
            pos: (int(x) for x in self.cursor_pos)
            size: 1, -self.line_height

    canvas.before:
        Clear
        # Outline
        Color:
            #group: "fill-color"
            rgba:
                self.theme_cls.onTertiaryContainerColor
                #self.theme_cls.surfaceContainerLowestColor
        RoundedRectangle:
            #group: "fill-color-rounded-rectangle"
            pos: self.x, self.y
            size: self.width, self.height
            radius: self.radius[0], self.radius[1], 0, 0

        Color:
            group: "rectangle-color"
            rgba:
                ( \
                ( \
                ( \
                ( \
                self.theme_cls.primaryColor \
                if self.theme_line_color == "Primary" else \
                self.line_color_focus \
                if self.line_color_focus else \
                self.theme_cls.primaryColor \
                ) \
                ) \
                if not self.error else self._get_error_color() \
                ) \
                if not self.disabled else \
                app.theme_cls.onSurfaceColor[:-1] + \
                [self.text_field_opacity_value_disabled_line]
                ) \
                if self.mode != "filled" else self.theme_cls.transparentColor


        # Top right corner.
        # ------------------------------------------------------─╮
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.width - self.radius[1], \
                self.y + self.height - self.radius[1], \
                self.radius[1], \
                0, \
                90

        # Bottom corner.
        # -----------------------------------------------------─╯
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.width - self.radius[2], \
                self.y + self.radius[2], \
                -self.radius[2], \
                0, \
                -90

        # Top left corner.
        # ╭─------------------------------------------------------
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.radius[0], \
                self.y + self.height - self.radius[0], \
                -self.radius[0], \
                180, \
                90

        # Bottom left corner.
        # ╰─-----------------------------------------------------
        SmoothLine:
            width: self._outline_height
            circle:
                self.x + self.radius[3], \
                self.y + self.radius[3], \
                -self.radius[3], \
                0, \
                90

       # Left vertical line.
       # │
       # │
       # ╰─------------------------------------------------------
        SmoothLine:
            width: self._outline_height
            points:
                self.x, \
                self.y + self.radius[3], \
                self.x, \
                self.y + (self.height - self.radius[0])

        # Right vertical line.
        #                                                       │
        #                                                       │
        # -----------------------------------------------------─╯
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.width, \
                self.y + self.radius[2], \
                self.x + self.width, \
                self.y + (self.height - self.radius[1])

        # Bottom horizontal line.
        # ——————————————————————————————————————————————————————─╯
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.radius[3], \
                self.y, \
                self.x + self.width - self.radius[2], \
                self.y

        # Top (left) part of the line.
        # ╭─-----------------------------------------------------
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self.radius[0], \
                self.y + self.height, \
                self.x + self._left_x_axis_pos, \
                self.y + self.height

        # Top (right) part of the line.
        # ╭─-----------—————————————————————————————————————————─╮
        SmoothLine:
            width: self._outline_height
            points:
                self.x + self._right_x_axis_pos, \
                self.y + self.height, \
                self.x + self.width - self.radius[1], \
                self.y + self.height

        # Text color.
        Color:
            group: "text-color"
            rgba:
                [1,1,1,1]

    padding:
        ( \
        dp(16) if not self._leading_icon else dp(42) \
        if self.mode != "filled" else \
        (dp(16) if not self._leading_icon else dp(52)), \

        (self.height / 2.0 - (self.line_height / 2.0) * min(len(self._lines), int(self.height / self.line_height))) \
        + dp(10 if self.mode == "filled" else 0), \

        dp(16) \
        if not self._trailing_icon else \
        self._trailing_icon.texture_size[0] + dp(28), \

        dp(5) \
        )
    multiline: False
    default_text_color: self.theme_cls.onSurfaceColor
    size_hint_y: None if not self.multiline else 1
    height: dp(56) if not self.multiline else 550
